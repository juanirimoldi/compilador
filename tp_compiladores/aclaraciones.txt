		             

//checkear tambien IF y PROC!! hacer sentencias de errror!!!
//asignacion con lado izq o der faltante
// = 3 ; , x = ;


%%ej jose


void f() { 
    void g() {
          void h() { x = y}
       r = s;
       h();
     }
   z = w;
   g();
 }
 
 
 (comienzo,f)
 (2, =, z, w)
 (3, INV, g@f)
 (4, Fin, f)
 
 %%termino alista de tercetos de programa principal

 (5, comienzo, g)
 (6, =, r, s)
 (7,INV, h@g@f) 
 (8,fin,g)
 
 (9,comienzo,h)
 (10, = x , y)
 (11, fin, h)

%%crear terceto que avisa que arranca procedimiento

 
 con esta lista se genera el assembler
 
 mov w, z
call g@f

terceto 5 -> ret
g: 

mov r, s
call h@g@f
ret
 
 
 -------------------------------
 
 
 mul ax,_300
mov ax,_300
mul _5
jc mensajeoverflow

mov _var1,AX

en la parte de .data
_5 DW 5

var1 = 300*5
mensajeoverflow:
invoke MessaBeox...




void f() {x=3;}
@f:
mov _x,_3
ret
f()
CALL @f




mov @aux1,3
en .data 
@aux1 dw 1




----------------------------------


EN .DATA VUELCO LA TSYM CON LA SINTAXIS DEL ASEMBLER


ENSAMBLADOR -> GENERA ARCHIVO DE TEXT CON STRINGS QUE SON LOS ASM


PARTE 4 -> TOMA LISTA TERCETOS + TSYM  Y  GENERA CODIGO


mov ax, 99
add ax, 3
mov _y, ax

TERCETO 4 Y 5
mov ax, _y
add ax, _z
mov _x, ax



la parte 4 leeria esa lista
y tendría por ej. :
t = Terceto(i)
if t.operador ="+" then {
	insertar("mov ax, t.operando1)
	insertar("add ax, t.operando2")
	insertar inserta el string en un archivo .asm que hay que crear vacio
	
	
serguimiento de registros -> registros libres EAx, EBX
como a veces piso registros -> hay que moverlos a otro lado

probarlo con ine -> genera los .exe


controles en t.ej

antes de cada div -> div es 0??

overflow -> antes de mul -> salto a instr Jump overflow



controlar IF anidados!	

es mejor no poner el salto BI



se libera cuando cuadni genera la instr..
a=1 , x a a

expr todas sobre la pila del coporcesador




//primero instalo wine y despues de moodle asm32


desargo en moodele asm32

ejecuto instalador de sm32

cd .wine/drive/masn32 

wine qeditor.exe
 
 
 //para generar el .exe -> proyecto -> build all
 
 
cuando ejectuas y no da error -> podes ir a proyect y ejecturalo


+, -, *, /  

loop y procedimiento -> INVOCACION!! es lo importante para evaluar la ejecucion



loop -> JUMP

procedimiento -> CALL y cuando termina RET


instrucciones especiales para invocacion a procedimiento


invocacion -> CALL


RET! -> cuando termina el proc devuelve el RET
aclarar al final de cada procedimineot que terina con un RET -> avisa que termina en 
cuando tengo un CALL



/.wine/drive_c/masm32$ wine qeditor.exe



PROBLEMAS:




ccon que instruccion defino < y > ? CMP?? en que formato?
CMP hace la resta entre dos operandos, o registros o ambas... 
entonces, involucra algun registro extra? si la comparacion es entre 2 variables?

CMP generica -> 
JG 
//para los floats -> 

JMP salto forzoso -> LOOP, IFs -> saltos incondicionales



como era el formato de instrucciones para los PROC? 
poner una etiqueta para identificar el proc


CALL nombre_proc , RET ?? -> CALL para invocacion



a medida que avanza el programa, voy cargando registros. en que momento los libero?
en un IF.. los registros para guardar variables locales, cuando libero esos registros??



como generar archivo .asm ??
  
yo lo crea con las instrucciones, pero hay que generar el template
.MODEL small
.STACK 200h
.DATA
 ??? como le paso la tsym?
.CODE
 ?? como le paso los tercetos?
.START:
 ???  
 
 
 
 ejemplos
 
 int a = 1;
@a DW 1


float b = 2.0;

@b DQ




NUEVAS DUDAS!! 

las etiquetas?? no entiendo bien los saltos...
como transformar los saltos en etiquetaas??


como y cuando crear el terceto RET ?? con alguna etiqueta?





ultimas dudas:


en declaracion de procedimientos -> RET al final del procedimiento

power@main no iria porque es proc, no variable

ej c@main DW 

_25 DW 25


no hay mucha documentacion, ni ejemplos


. agregar los include!! para mostrar saliuda por pantalla


. cambiando DW por DD funciona! porque coincide el tamaño de los registros
pero... como hago operaciones entre enteros y flotantes?


. si es cte -> DD , si es float -> DW


. hacer las llamadas con pop y push ??  o con proc e invoke?


. x e y no tienen name mangling porque son parametros.. ?



pto flotante -> no usa registros de CPU. por eso -> se hacen en 3a pila del coporocesador



https://home.deec.uc.pt/~jlobo/tc/artofasm/ch14/ch144.htm#HEADING4-14


!! falta actualizar el puntero en las asignaciones!! para cuando la asignacion es una variable, o un terceto
!! tambien falta tirar error de tipos enla suma entre float + int , e int + float


#para evitar el conflicto entre instrucciones,se decidio agregar un flag de undone
para retrotraer las asignaciones IMPLICITAS entre distintos tipos